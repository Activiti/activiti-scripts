import:
  - source: Alfresco/alfresco-build-tools:.travis.pre-commit.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.rancher_cli_kubernetes_config.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.awscli_install.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.helm-docs_install.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.helm_install.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.rancher_cli_install.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.yq_install.yml@v1.1.5
  - source: Alfresco/alfresco-build-tools:.travis.kubernetes_install.yml@v1.1.5

language: java
jdk: openjdk11

services:
  - docker

fail_fast: true

env:
  global:
    - NEXUS_STAGING_FILE=maven-config/staging-repository.txt
    - SETTINGS_XML_FILE_PATH=maven-config/settings.xml
    - MAVEN_PUSH=true
    - GIT_PUSH=true
    - IGNORE_TAG_CHECKOUT_FAILURE=false
    - DEPLOY_EXISTING=
    - CHECK_VERSIONS=
    - SRC_DIR=${TRAVIS_BUILD_DIR}/..
    - NODE_OPTIONS=--max_old_space_size=30000
    - TRAVIS_WAIT_TIMEOUT=${TRAVIS_WAIT_TIMEOUT:-180}
    - GITHUB_CHARTS_REPO="https://github.com/Activiti/activiti-cloud-helm-charts.git"
    - GITHUB_HELM_REPO_URL="https://activiti.github.io/activiti-cloud-helm-charts/"
    - S3_M2_REPOSITORY_DIR=${S3_BASE_DIR}/aae-m2/repository
    - M2_DIR=${HOME}/.m2
    - M2_REPOSITORY_DIR=${M2_DIR}/repository

before_install:
  - nvm install 12.18.1
  - nvm use 12.18.1
  - echo $GPG_SECRET_KEYS | base64 --decode | $GPG_EXECUTABLE --import --no-tty --batch --yes
  - echo $GPG_OWNERTRUST | base64 --decode | $GPG_EXECUTABLE --import-ownertrust  --no-tty --batch --yes
  - echo BRANCH=${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_BRANCH}}
  - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USERNAME" --password-stdin "$DOCKER_REGISTRY"
  - mkdir -p ${M2_DIR}
  - cp ${SETTINGS_XML_FILE_PATH} ${M2_DIR}

  - export PREVIEW_NAME=$(echo "v$TRAVIS_BRANCH-$TRAVIS_BUILD_ID"|  tr '[:upper:]' '[:lower:]'|tr . -)
  - ORG='activiti'
  - export HELM_RELEASE_NAME="$TRAVIS_BRANCH-$TRAVIS_BUILD_ID"
  - export GATEWAY_HOST="gateway-$PREVIEW_NAME.$GLOBAL_GATEWAY_DOMAIN"
  - export SSO_HOST="identity-$PREVIEW_NAME.$GLOBAL_GATEWAY_DOMAIN"
  - curl -Ls -o updatebot.jar   https://repo1.maven.org/maven2/io/jenkins/updatebot/updatebot/1.1.53/updatebot-1.1.53.jar
  - sudo cp updatebot.jar  /usr/bin/updatebot.jar
  - echo "java -jar /usr/bin/updatebot.jar \$@" > updatebot
  - sudo cp updatebot  /usr/bin/updatebot
  - sudo chmod a+x /usr/bin/updatebot
  - echo -e "https://$GITHUB_USER:$GITHUB_TOKEN@github.com" >>  ~/.git-credentials

stages:
  - name: lint
  - name: Create tag
    if: (commit_message =~ /\[Release\] .+/ OR type = cron) AND (tag IS blank)
  - name: Release Activiti Core
    if: tag =~ /.+\..+\..+/
  - name: Release Activiti Cloud
    if: tag =~ /.+\..+\..+/
  - name: Release Activiti Cloud Application
    if: tag =~ /.+\..+\..+/
  - name: Release Activiti Cloud Modeling App
    if: tag =~ /.+\..+\..+/
  - name: Release Docker Images
    if: tag =~ /.+\..+\..+/
  - name: Release Helm Chart
    if: tag =~ /.+\..+\..+/

jobs:
  include:
    - stage: Create tag
      script: ./create-tag.sh

    - stage: Release Activiti Core
      env:
        - PROJECTS=activiti
        - USE_CACHE=true
      script: ./release-ci.sh

    - stage: Release Activiti Cloud
      env:
        - PROJECTS=activiti-cloud
        - USE_CACHE=true
      script: ./release-ci.sh

    - stage: Release Activiti Cloud Application
      env:
        - PROJECTS=activiti-cloud-application
        - USE_CACHE=true
      script: ./release-ci.sh

    - stage: Release Activiti Cloud Modeling App
      env:
        - PROJECTS=activiti-modeling-app
      script: ./release-ci.sh

    - stage: Release Docker Images
      env:
        - DOCKER_PUSH=true
      name: "Activiti Cloud Example Images"
      script: ./release-docker-activiti-cloud-example-images.sh

    - name: "Activiti Modeling App"
      env:
        - DOCKER_PUSH=true
      script: ./release-docker-modeling-app.sh

    - stage: Release Helm Chart
      script: |
        (
          set -e
          export VERSION=$(cat VERSION)
          export RELEASE_VERSION=$(cat VERSION)
          export HELM_ACTIVITI_VERSION=$(cat VERSION)
          export SSO_PROTOCOL=https
          export GATEWAY_PROTOCOL=https
          ./release-helm.sh
        )
      after_script:
        - helm delete --no-hooks ${PREVIEW_NAME} --namespace ${PREVIEW_NAME} || echo "Trying to delete chart"
        - kubectl delete ns ${PREVIEW_NAME} || echo "Trying to delete namespace"
