name: Release Activiti Cloud

# TODO we should run the pre-commit tasks only in the case of
# TODO a PR modifying this repo (activiti-scripts) and not
# TODO when launching a release process

# TODO we should run the release process only when a certain
# TODO commit message is matched [ci:release]

# TODO we should support the rollback of a release if possible
# TODO with a commit message [ci:rollback]

# TODO we need to change the branches we use to perform the release
# TODO we could delete master and use develop.

# TODO after the release process succeeds we need to update the
# TODO release.yaml file with the versions of Activiti, activiti-cloud,
# TODO activiti-cloud-application used to create the release
on:
  push:
    branches: [ gh-3903-gh-action-workflow ]
  pull_request:
    branches: [ gh-3903-gh-action-workflow ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NEXUS_URL: "https://artifacts.alfresco.com/nexus"
  NEXUS_PROFILE_ID: "${{ secrets.NEXUS_ACTIVITI7_PROFILE_ID }}"
  NEXUS_USERNAME: "${{ secrets.NEXUS_USERNAME }}"
  NEXUS_PASSWORD: "${{ secrets.NEXUS_PASSWORD }}"
  NEXUS_STAGING_PROFILE_PATTERN: "activiti-7-community-staging-profile-[0-9]*"
  GPG_EXECUTABLE: "gpg"
  GPG_PASSPHRASE: "${{ secrets.GPG_PASSPHRASE }}"
  GPG_SECRET_KEYS: "${{ secrets.GPG_SECRET_KEYS }}"
  GPG_OWNERTRUST: "${{ secrets.GPG_OWNERTRUST }}"

jobs:

  prepare-release:
    runs-on: ubuntu-20.04
    outputs:
      activiti-cloud-application: ${{ steps.tags.outputs.activiti-cloud-application }}
      activiti-cloud: ${{ steps.tags.outputs.activiti-cloud }}
      activiti: ${{ steps.tags.outputs.activiti }}
      BRANCH: ${{ steps.tags.outputs.BRANCH }}
      VERSION: ${{ steps.tags.outputs.VERSION }}
      NEXT_VERSION: ${{ steps.tags.outputs.NEXT_VERSION }}
      MOCK: ${{ steps.tags.outputs.MOCK }}

    steps:
      # - uses: Alfresco/alfresco-build-tools/.github/actions/pre-commit@@v1.4.0
      - name: Installing activiti-scripts
        uses: actions/checkout@v3

      - name: Checkout activiti-cloud-application
        uses: actions/checkout@v3
        with:
          repository: 'Activiti/activiti-cloud-application'
          path: 'repos/activiti-cloud-application'

      - name: Installing yq
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-yq@v1.4.0

      - name: fetch-tags-to-release
        id: tags
        run: |
          VERSION=$(yq e '.release.version' release.yaml)
          BRANCH=$(yq e '.release.version' release.yaml)
          NEXT_VERSION=$(yq e '.release.nextVersion' release.yaml)
          MOCK=$(yq e '.release.mock' release.yaml)

          ./gh-actions-scripts/fetch-activiti-tags-from.sh -t "${VERSION%-mock*}-alpha*" -p repos/activiti-cloud-application

          if [ "$MOCK" == "true" ]; then
            VERSION=$VERSION-mock
          fi

          echo "::set-output name=BRANCH::$BRANCH"
          echo "::set-output name=VERSION::$VERSION"
          echo "::set-output name=NEXT_VERSION::$NEXT_VERSION"
          echo "::set-output name=MOCK::$MOCK"

  release-docker-images:
    runs-on: ubuntu-20.04
    needs: prepare-release
    env:
      DOCKER_IMAGES: "example-runtime-bundle,activiti-cloud-query,example-cloud-connector,activiti-cloud-modeling"
      BASE_TAG: "${{ needs.prepare-release.outputs.activiti-cloud-application }}"
      RELEASE_VERSION: "${{ needs.prepare-release.outputs.VERSION }}"
      DOCKERHUB_ORG: activiti
      DOCKERHUB_USERNAME: "${{ secrets.DOCKERHUB_USERNAME }}"
      DOCKERHUB_ACCESS_TOKEN: "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}"
      MOCK: "${{ needs.prepare-release.outputs.MOCK }}"
    steps:
      - name: Checkout activiti-scripts
        uses: actions/checkout@v3

      - name: tag-docker-images
        working-directory: ./gh-actions-scripts
        run: |
          for DOCKER_IMAGE in ${DOCKER_IMAGES//,/ }
          do
            echo "releasing $DOCKER_IMAGE from base tag $BASE_TAG with tag $RELEASE_VERSION"
            ./tag-docker-image.sh \
              $BASE_TAG \
              $RELEASE_VERSION \
              $DOCKERHUB_ORG \
              $DOCKER_IMAGE \
              $DOCKERHUB_USERNAME \
              $DOCKERHUB_ACCESS_TOKEN
            echo "$DOCKER_IMAGE released."
          done
      - name: update-helm-charts
        env:
          VERSION: $(cat VERSION)
          RELEASE_VERSION: ${{ needs.prepare-release.outputs.VERSION }}
          HELM_ACTIVITI_VERSION: $(cat VERSION)
          SSO_PROTOCOL: https
          GATEWAY_PROTOCOL: https

        run: |
          # TODO the release-helm scripts deploys an activiti cloud application
          # TODO launches acceptance tests. Is this necessary?
          set -e
          #./release-helm.sh
          #
          # helm delete --no-hooks ${PREVIEW_NAME} --namespace ${PREVIEW_NAME} || echo "Trying to delete chart"
          # kubectl delete ns ${PREVIEW_NAME} || echo "Trying to delete namespace"
          #
      - name: push-helm-charts
        run: |
          ./gh-actions-scripts/dummy-step.sh

  create-artifacts-staging-env:
    runs-on: ubuntu-20.04
    needs: prepare-release
    outputs:
      STAGING_REPOSITORY: ${{ steps.staging.outputs.STAGING_REPOSITORY }}
      SETTINGS_XML: ${{ steps.staging.outputs.SETTINGS_XML }}
    env:
      RELEASE_VERSION: ${{ needs.prepare-release.outputs.VERSION }}
      MOCK: ${{ needs.prepare-release.outputs.MOCK }}
    steps:
      - uses: actions/checkout@v3
      - name: create-staging-environment
        id: staging
        working-directory: "./maven-config"
        run: |
          cp staging-repository-template.xml staging-repository-template.xml.bak
          sed "s/RELEASE_VERSION/${RELEASE_VERSION}/g" staging-repository-template.xml.bak > staging-repository-template.xml

          NEXUS_STAGING_DATA=$(curl -d @staging-repository-template.xml \
            -u "${NEXUS_USERNAME}":"${NEXUS_PASSWORD}" \
            -H "Content-Type:application/xml" \
            "${NEXUS_URL}"/service/local/staging/profiles/"${NEXUS_PROFILE_ID}"/start | \
            grep stagedRepositoryId | grep -o "$NEXUS_STAGING_PROFILE_PATTERN")

          echo "Stating repository $NEXUS_STAGING_DATA"

          cp settings.xml settings.xml.bak
          sed "s/STAGING_ID/${NEXUS_STAGING_DATA}/g" "settings.xml.bak" > settings.xml

          CONTENT=$(< settings.xml)
          CONTENT="${CONTENT//'%'/'%25'}"
          CONTENT="${CONTENT//$'\n'/'%0A'}"
          CONTENT="${CONTENT//$'\r'/'%0D'}"

          echo "::set-output name=STAGING_REPOSITORY::$NEXUS_STAGING_DATA"
          echo "::set-output name=SETTINGS_XML::$CONTENT"

  # TODO check if it is better to call an external workflow
  # TODO passing as paramters the project and its version
  # TODO e.g. Activiti, 7.2.1-alpha.3
  release-maven-artifacts:
    runs-on: ubuntu-20.04
    needs: ["prepare-release","create-artifacts-staging-env"]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        # TODO Should we add also activiti-cloud-modeling?
        repo: ['Activiti','activiti-cloud','activiti-cloud-application']
    env:
      activiti-cloud-application: "${{ needs.prepare-release.outputs.activiti-cloud-application }}"
      activiti-cloud: "${{ needs.prepare-release.outputs.activiti-cloud }}"
      Activiti: "${{ needs.prepare-release.outputs.activiti }}"
      # REPO_VERSION contains the version of the repo of the matrix
      # it computes it using the github actions variable ${{ matrix.repo }}
      # as the name of the environment variable that contains the version
      # number. e.g. ${${{ matrix.repo }}} -> ${Activiti} -> 7.3.1-alpha.4
      REPO_VERSION: "${${{ matrix.repo }}}"
      RELEASE_VERSION: "${{ needs.prepare-release.outputs.VERSION }}"
      STAGING_REPOSITORY: "${{ needs.create-artifacts-staging-env.outputs.STAGING_REPOSITORY }}"
      SETTINGS_XML: "${{ needs.create-artifacts-staging-env.outputs.SETTINGS_XML }}"
      M2_DIR: "/home/runner/.m2"
      MOCK: "${{ needs.prepare-release.outputs.MOCK }}"

    steps:
      - name: Installing tools
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-yq@v1.4.0

      - name: Checkout activiti-script
        uses: actions/checkout@v3

      - name: Checkout ${{ matrix.repo }}
        uses: actions/checkout@v3
        with:
          repository: 'Activiti/${{ matrix.repo }}'
          path: 'repos/${{ matrix.repo }}'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
          cache: 'maven'

      - name: copy-settings-xml
        run: |
          echo $SETTINGS_XML > $M2_DIR/settings.xml
          echo $GPG_SECRET_KEYS | base64 --decode | $GPG_EXECUTABLE --import --no-tty --batch --yes
          echo $GPG_OWNERTRUST | $GPG_EXECUTABLE --import-ownertrust  --no-tty --batch --yes

      - name: checkout-${{ matrix.repo }}
        working-directory: repos/${{ matrix.repo }}
        run: |
          git fetch --tags
          # TODO evaluate if to keep the '~1' or not
          git checkout -q "tags/${${{ matrix.repo }}}~1"
          echo "Using the base tag '${${{ matrix.repo }}}' for project '${{ matrix.repo }}'"

      - name: update-pom-to-release-version
        working-directory: repos/${{ matrix.repo }}
        run: |
          # TODO Check that the update is updating all the needed dependencies
          # TODO e.g.: activiti-cloud 7.3.1 should refer to Activiti 7.3.1
          mvn versions:set -B -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false

      - name: maven-build-and-upload
        working-directory: repos/${{ matrix.repo }}
        run: |
          echo "Deploying to repository ${STAGING_REPOSITORY}"
          mvn clean deploy \
            -DperformRelease \
            -DskipTests \
            -Dmaven.compiler.release=11 \
            -Dmaven.artifact.threads=30 \
            -B \
            -DaltReleaseDeploymentRepository=nexus-releases-staging-fixed::default::"${NEXUS_URL}"/service/local/staging/deployByRepositoryId/"${STAGING_REPOSITORY}" \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

      - name: tag-updated-repo
        working-directory: repos/${{ matrix.repo }}
        run: |
          echo git tag -f -a "${RELEASE_VERSION}" -m "Release version ${RELEASE_VERSION}"
          echo git push origin "${RELEASE_VERSION}"

  release-artifacts-staging-env:
    runs-on: ubuntu-20.04
    needs: release-maven-artifacts
    steps:
      - uses: actions/checkout@v3
      - name: close-and-release-staging-environment
        run: |
          # TODO Should we close and release the nexus artifact staging env?
          ./gh-actions-scripts/dummy-step.sh

  # TODO should this step be skipped for the mock release?
  finalize-branch:
    runs-on: ubuntu-20.04
    needs: ["prepare-release","release-maven-artifacts"]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        # TODO Should we add also activiti-cloud-modeling?
        repo: ['Activiti','activiti-cloud','activiti-cloud-application']
    env:
      NEXT_VERSION: "${{ needs.prepare-release.outputs.NEXT_VERSION }}"
    steps:
      - name: Checkout ${{ matrix.repo }}
        uses: actions/checkout@v3
        with:
          repository: 'Activiti/${{ matrix.repo }}'
          path: 'repos/${{ matrix.repo }}'
          ref: '${{ needs.prepare-release.outputs.BRANCH }}'

      - name: update-to-next-version
        working-directory: repos/${{ matrix.repo }}
        run: |
          # TODO Check that the update is updating all the needed dependencies
          # TODO e.g.: activiti-cloud 7.3.1-SNAPSHOT should refer to Activiti 7.3.1-SNAPSHOT
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false

      - name: commit-and-push
        working-directory: repos/${{ matrix.repo }}
        run: |
          # TODO which user should commit and push?
          echo "commit and push repository"
          cat pom.xml
