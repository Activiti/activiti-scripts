name: Release Activiti Cloud

# TODO we should run the pre-commit tasks only in the case of
# TODO a PR modifying this repo (activiti-scripts) and not
# TODO when launching a release process

# TODO we should run the release process only when a certain
# TODO commit message is matched [ci:release]

# TODO we should support the rollback of a release if possible
# TODO with a commit message [ci:rollback]

# TODO we need to change the branches we use to perform the release
# TODO we could delete master and use develop.

# TODO after the release process succeeds we need to update the
# TODO release.yaml file with the versions of Activiti, activiti-cloud,
# TODO activiti-cloud-application used to create the release
on:
  push:
    branches: [ gh-3903-gh-action-workflow ]
  pull_request:
    branches: [ gh-3903-gh-action-workflow ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  prepare-release:
    runs-on: ubuntu-20.04
    outputs:
      activiti-cloud-application: ${{ steps.tags.outputs.activiti-cloud-application }}
      activiti-cloud: ${{ steps.tags.outputs.activiti-cloud }}
      activiti: ${{ steps.tags.outputs.activiti }}
      BRANCH: ${{ steps.tags.outputs.BRANCH }}
      VERSION: ${{ steps.tags.outputs.VERSION }}
      NEXT_VERSION: ${{ steps.tags.outputs.NEXT_VERSION }}
      MOCK: ${{ steps.tags.outputs.MOCK }}

    steps:
      # - uses: Alfresco/alfresco-build-tools/.github/actions/pre-commit@@v1.4.0
      - name: Installing activiti-scripts
        uses: actions/checkout@v3

      - name: Checkout activiti-cloud-application
        uses: actions/checkout@v3
        with:
          repository: 'Activiti/activiti-cloud-application'
          path: 'repos/activiti-cloud-application'

      - name: fetch-tags-to-release
        id: tags
        run: |
          VERSION=$(yq e '.release.version' release.yaml)
          BRANCH=$(yq e '.release.version' release.yaml)
          NEXT_VERSION=$(yq e '.release.nextVersion' release.yaml)
          MOCK=$(yq e '.release.mock' release.yaml)

          ./gh-actions-scripts/fetch-activiti-tags-from.sh -t "${VERSION%-mock*}-alpha*" -p repos/activiti-cloud-application

          if [ "$MOCK" == "true" ]; then
            VERSION=$VERSION-mock
          fi

          echo "::set-output name=BRANCH::$BRANCH"
          echo "::set-output name=VERSION::$VERSION"
          echo "::set-output name=NEXT_VERSION::$NEXT_VERSION"
          echo "::set-output name=MOCK::$MOCK"

  release-docker-images:
    runs-on: ubuntu-latest
    needs: prepare-release
    env:
      DOCKER_IMAGES: "example-runtime-bundle,activiti-cloud-query,example-cloud-connector,activiti-cloud-modeling"
      BASE_TAG: "${{ needs.prepare-release.outputs.activiti-cloud-application }}"
      RELEASE_VERSION: "${{ needs.prepare-release.outputs.VERSION }}"
      DOCKERHUB_ORG: activiti
      DOCKERHUB_USERNAME: "${{ secrets.DOCKERHUB_USERNAME }}"
      DOCKERHUB_ACCESS_TOKEN: "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}"
      MOCK: "${{ needs.prepare-release.outputs.MOCK }}"
    steps:
      - name: Checkout activiti-scripts
        uses: actions/checkout@v3

      - name: tag-docker-images
        working-directory: ./gh-actions-scripts
        run: |
          for DOCKER_IMAGE in ${DOCKER_IMAGES//,/ }
          do
            echo "releasing $DOCKER_IMAGE from base tag $BASE_TAG with tag $RELEASE_VERSION"
            ./tag-docker-image.sh \
              $BASE_TAG \
              $RELEASE_VERSION \
              $DOCKERHUB_ORG \
              $DOCKER_IMAGE \
              $DOCKERHUB_USERNAME \
              $DOCKERHUB_ACCESS_TOKEN
            echo "$DOCKER_IMAGE released."
          done
      - name: update-helm-charts
        env:
          VERSION: $(cat VERSION)
          RELEASE_VERSION: ${{ needs.prepare-release.outputs.VERSION }}
          HELM_ACTIVITI_VERSION: $(cat VERSION)
          SSO_PROTOCOL: https
          GATEWAY_PROTOCOL: https

        run: |
          # TODO the release-helm scripts deploys an activiti cloud application
          # TODO launches acceptance tests. Is this necessary?
          set -e
          #./release-helm.sh
          #
          # helm delete --no-hooks ${PREVIEW_NAME} --namespace ${PREVIEW_NAME} || echo "Trying to delete chart"
          # kubectl delete ns ${PREVIEW_NAME} || echo "Trying to delete namespace"
          #
      - name: push-helm-charts
        run: |
          ./gh-actions-scripts/dummy-step.sh

  release-modeling-app:
    runs-on: ubuntu-latest
    needs: prepare-release
    env:
      MODELING_APP_DIR: modeling-app
      MODELING_APP_BASE_REF: master
      DOCKERHUB_ORG: activiti
      RELEASE_VERSION: "${{ needs.prepare-release.outputs.VERSION }}"
    steps:
      - name: Checkout modeling-app
        uses: actions/checkout@v3
        with:
          path: ${{ env.MODELING_APP_DIR }}
          repository: Activiti/activiti-modeling-app
          ref: ${{ env.MODELING_APP_BASE_REF }}
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      - uses: Alfresco/alfresco-build-tools/.github/actions/git-check-existing-tag@aae-8254-actions-for-activiti-script
        id: check-tag
        with:
          tag: ${{ env.RELEASE_VERSION }}
          repository-directory: ${{ env.MODELING_APP_DIR }}

      - name: update commit ref and version
        if: steps.check-tag.outputs.exists == 'false'
        working-directory: ${{ env.MODELING_APP_DIR }}
        run: |
          sed -i -e "s/\"commit\": \".*\"/\"commit\": \"$(git rev-parse HEAD)\"/g" package.json
          sed -i -e "s/\"version\": \".*\"/\"version\": \"$RELEASE_VERSION\"/g" package.json

      - name: build
        if: steps.check-tag.outputs.exists == 'false'
        working-directory: ${{ env.MODELING_APP_DIR }}
        run: |
          npm install
          npm run build -- --prod

      - name: Login to DockerHub
        if: steps.check-tag.outputs.exists == 'false'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: build and push docker
        if: steps.check-tag.outputs.exists == 'false'
        working-directory: ${{ env.MODELING_APP_DIR }}
        run: |
          docker build --build-arg PROJECT_NAME=modeling-ce -t ${DOCKERHUB_ORG}/activiti-modeling-app:${RELEASE_VERSION} .
          docker push docker.io/${DOCKERHUB_ORG}/activiti-modeling-app:${RELEASE_VERSION}

      - uses: Alfresco/alfresco-build-tools/.github/actions/git-commit-changes@v1.9.2
        if: steps.check-tag.outputs.exists == 'false'
        with:
          repository-directory: ${{ env.MODELING_APP_DIR }}
          username: ${{ secrets.BOT_GITHUB_USERNAME }}
          add-options: package.json
          commit-message: Release version ${{env.RELEASE_VERSION}}

      - name: Create tag
        if: steps.check-tag.outputs.exists == 'false'
        working-directory: ${{ env.MODELING_APP_DIR }}
        run: |
          git tag -a $RELEASE_VERSION -m "Release version $RELEASE_VERSION"
          git push origin $RELEASE_VERSION


  create-artifacts-staging-repo:
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      staging-repository: ${{ steps.staging.outputs.staging-repository }}
    steps:
      - name: create-staging-repository
        id: staging
        uses: Alfresco/alfresco-build-tools/.github/actions/nexus-create-staging@aae-8254-actions-for-activiti-script
        with:
          staging-description: Activiti staging ${{ needs.prepare-release.outputs.VERSION }}
          nexus-profile-id: "${{ secrets.NEXUS_ACTIVITI7_PROFILE_ID }}"
          nexus-username: "${{ secrets.NEXUS_USERNAME }}"
          nexus-password: "${{ secrets.NEXUS_PASSWORD }}"

  release-activiti:
    runs-on: ubuntu-latest
    needs: ["prepare-release","create-artifacts-staging-repo"]
    steps:
      - name: Checkout activiti-scripts
        uses: actions/checkout@v3

      - uses: ./.github/actions/release-maven
        with:
          repo: Activiti
          base-tag: ${{  needs.prepare-release.outputs.activiti }}
          release-version: ${{ needs.prepare-release.outputs.VERSION }}
          staging-repository-id: ${{ env.STAGING_REPOSITORY}}
          git-username: ${{ secrets.BOT_GITHUB_USERNAME }}
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          gpg-passphrase: "${{ secrets.GPG_PASSPHRASE }}"
          gpg-secret-keys: "${{ secrets.GPG_SECRET_KEYS }}"
          gpg-owner-trust: "${{ secrets.GPG_OWNERTRUST }}"
          nexus-username: "${{ secrets.NEXUS_USERNAME }}"
          nexus-password: "${{ secrets.NEXUS_PASSWORD }}"

  release-activiti-cloud:
    runs-on: ubuntu-latest
    needs: ["prepare-release","create-artifacts-staging-repo", "release-activiti"]
    steps:
      - name: Checkout activiti-scripts
        uses: actions/checkout@v3

      - uses: ./.github/actions/release-maven
        with:
          repo: activiti-cloud
          base-tag: ${{  needs.prepare-release.outputs.activiti-cloud }}
          release-version: ${{ needs.prepare-release.outputs.VERSION }}
          staging-repository-id: ${{ needs.create-artifacts-staging-repo.outputs.staging-repository }}
          git-username: ${{ secrets.BOT_GITHUB_USERNAME }}
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          gpg-passphrase: "${{ secrets.GPG_PASSPHRASE }}"
          gpg-secret-keys: "${{ secrets.GPG_SECRET_KEYS }}"
          gpg-owner-trust: "${{ secrets.GPG_OWNERTRUST }}"
          nexus-username: "${{ secrets.NEXUS_USERNAME }}"
          nexus-password: "${{ secrets.NEXUS_PASSWORD }}"

  release-activiti-cloud-application:
    runs-on: ubuntu-latest
    needs: ["prepare-release","create-artifacts-staging-repo", "release-activiti-cloud"]
    steps:
      - name: Checkout activiti-scripts
        uses: actions/checkout@v3

      - uses: ./.github/actions/release-maven
        with:
          repo: activiti-cloud-application
          base-tag: ${{  needs.prepare-release.outputs.activiti-cloud-application }}
          release-version: ${{ needs.prepare-release.outputs.VERSION }}
          staging-repository-id: ${{ needs.create-artifacts-staging-repo.outputs.staging-repository }}
          git-username: ${{ secrets.BOT_GITHUB_USERNAME }}
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          gpg-passphrase: "${{ secrets.GPG_PASSPHRASE }}"
          gpg-secret-keys: "${{ secrets.GPG_SECRET_KEYS }}"
          gpg-owner-trust: "${{ secrets.GPG_OWNERTRUST }}"
          nexus-username: "${{ secrets.NEXUS_USERNAME }}"
          nexus-password: "${{ secrets.NEXUS_PASSWORD }}"

  release-artifacts-staging-env:
    runs-on: ubuntu-20.04
    needs: release-activiti-cloud-application
    steps:
      - uses: actions/checkout@v3
      - name: close-and-release-staging-environment
        run: |
          # TODO Should we close and release the nexus artifact staging env?
          ./gh-actions-scripts/dummy-step.sh

  # TODO should this step be skipped for the mock release?
  finalize-branch:
    runs-on: ubuntu-20.04
    needs: ["prepare-release","release-activiti-cloud-application"]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        # TODO Should we add also activiti-cloud-modeling?
        repo: ['Activiti','activiti-cloud','activiti-cloud-application']
    env:
      NEXT_VERSION: "${{ needs.prepare-release.outputs.NEXT_VERSION }}"
    steps:
      - name: Checkout ${{ matrix.repo }}
        uses: actions/checkout@v3
        with:
          repository: 'Activiti/${{ matrix.repo }}'
          path: 'repos/${{ matrix.repo }}'
          ref: '${{ needs.prepare-release.outputs.BRANCH }}'

      - name: update-to-next-version
        working-directory: repos/${{ matrix.repo }}
        run: |
          # TODO Check that the update is updating all the needed dependencies
          # TODO e.g.: activiti-cloud 7.3.1-SNAPSHOT should refer to Activiti 7.3.1-SNAPSHOT
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false

      - name: commit-and-push
        working-directory: repos/${{ matrix.repo }}
        run: |
          # TODO which user should commit and push?
          echo "commit and push repository"
          cat pom.xml
